Algorithm : DFS(v)

n ‚Üê number of nodes
//Initialize visited[ ] to false (0)
for(i=0;i<n;i++)
	visited[i] = 0;
 
void DFS(vertex i) [DFS starting from i]
{
	visited[i]=1;
	for each w adjacent to i
		if(!visited[w])
			DFS(w);
}


Algorithm : BFS(v)

BFS (G, s)                 						//Where G is the graph and s is the source node
	Q.enqueue( s ) 								//Inserting s in queue until all its neighbour vertices are marked.
	mark s as visited.

	while ( Q is not empty)
		v  =  Q.dequeue()						//Removing that vertex from queue,whose neighbour will be visited now

		for all neighbours w of v in Graph G 	//processing all the neighbours of v
			if w is not visited					
		       	Q.enqueue( w )             		//Stores w in Q to further visit its neighbour
		        mark w as visited.